---------------------------- #1 -------------------------------
sub typeof { print ref \$_[0], "\n"; }
typeof (*a);
typeof ($b);
typeof (\$c);
typeof (@d);
typeof (%e);
---------------------------- #1 -------------------------------


---------------------------- #2 -------------------------------
sub foo { print "i'm foo one\n"; }
foo;

$r1 = \&foo;
foo;
&$r1;

sub foo { print "i'm foo two\n"; }
foo;
&$r1;

---------------------------- #2 -------------------------------


---------------------------- #3 -------------------------------
$foo = 1;
$bar = 2;
$baz = 3;

print "foo $foo, bar $bar, baz $baz\n";

*foo = \$bar;
$baz = $bar;

print "foo $foo, bar $bar, baz $baz\n";

$bar = 100;

print "foo $foo, bar $bar, baz $baz\n";
---------------------------- #3 -------------------------------


---------------------------- #4 -------------------------------
sub foo { print "i'm foo\n";}
sub bar { print "i'm bar\n";}
sub baz { print "i'm baz\n";}

foo; bar;
*foo = *bar;
foo; bar;
*foo = \&baz;
foo; bar;
---------------------------- #4 -------------------------------


----------------------------- #5 -------------------------------
BEGIN { foo (b,1); sub foo { print "BEGIN: @_\n"; } foo (e,1); }
        foo (b,2); sub foo { print "MAIN:  @_\n"; } foo (e,2);
END   { foo (b,3); sub foo { print "END:   @_\n"; } foo (e,3); }
----------------------------- #5 -------------------------------

---------------------------- #6 -------------------------------
package Baz;

sub TIESCALAR
{
    my $class = shift;
    my $sv;
    return bless \$sv, $class;
}

sub FETCH
{
    my $self = shift;
    print "fetch for ", ref $self, "\n";
    return $$self;
}

sub STORE
{
    my $self = shift;
    print "store for ", ref $self, "\n";
    $$self = shift;
    return undef;
}

package Foo;

tie $foo, Baz;

$foo += 1;
$foo = $foo + 1;
$foo += 2;
$foo = $foo + 2;
---------------------------- #6 -------------------------------

---------------------------- #7 -------------------------------
# bar is a file that contains just the string "(1,2,3)"

@a = eval "(1,2,3)";
@b = do { (1,2,3) };
@c = do 'bar';
@d = require 'bar';

print "a ->@a<-\n";
print "b ->@b<-\n";
print "c ->@c<-\n";
print "d ->@d<-\n";
---------------------------- #7 -------------------------------

